/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */



 plugins {
 	id 'application'
    // Apply the java-library plugin to add support for Java Library
	id 'java-library'
	//id 'application'
	id 'org.openjfx.javafxplugin' version '0.0.7'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    //implementation ':Core'
	compile project(':Core')
	//implementation project(path:':Core')
    
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	compile group: 'commons-codec', name: 'commons-codec', version: '1.5'

	// https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '1.1.7'
	
	// https://mvnrepository.com/artifact/org.openjfx/javafx
	compile group: 'org.openjfx', name: 'javafx', version: '11.0.1', ext: 'pom'
	
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    
}

//task getDeps(type: Copy) {
 // from sourceSets.main.runtimeClasspath
//  into 'runtime/'
//}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE")
    doLast {
        copy {
            from "LICENSE"
            into "$buildDir"
        }
    }
}

applicationDistribution.from(copyLicense) {
    into ""
}

mainClassName = 'Server.ServerGUI'